#####################################################################
# Simple TileSet subclass
#####################################################################

class SimpleTileSet : TileSet {
  #The image containing our palette.
  var img;
  var size;
  var tiles;

  var tileSize;  #Duplicate, but needed for now.

  #Load a file as the tileset; check it fits within the given tileSize.
  function load_file(string filename, int tileSize) {
    #Load properties.
    self.img = new Image;
    self.img.load_file(filename);

    #Save for later
    self.tileSize = tileSize;

    #Turn off smoothing; required to look decent.
    self.img.set_smooth(0);

    #Check size
    if ((self.img.get_width()%tileSize!=0) || (self.img.get_height()%tileSize!=0)) {
      throw Error("TileSet image is not divisible by tile size.");
    }

    #Set size, create array of sprites
    int num_rows = self.img.get_height()/tileSize;
    int num_cols = self.img.get_width()/tileSize;
    self.size = (num_cols * num_rows);
    self.tiles = [];
    for (int row=0; row<num_rows; row++) {
      for (int col=0; col<num_cols; col++) {
        #Make a new sprite
        var spr = new Sprite;
        spr.set_image(self.img);

        #This performs better if no alpha blending is used.
        spr.set_blend_off();

        #Bound it, save it
        spr.set_sub_rect(col*tileSize, row*tileSize, tileSize, tileSize);
        push(self.tiles, spr);
      }
    }
  }

  function get_size() {
    return self.size;
  }

  function check_tile_id(int id) {
    if (id<0 || id>=self.size) {
      throw Error("Attempting to draw tile which is out of tileset range.");
    }
  }

  function draw_tile(var game, int id, int x, int y) {
    self.check_tile_id(id);

    #Get it, position it, draw it.
    var spr = self.tiles[id];
    spr.set_position(x, y);
    game.draw_item(spr);
  }

  #Stamp an image onto another. We are guaranteed to have space on the image, but 
  #   besides that it gets a bit messy.
  function stamp_image(var img, int id, int destX, int destY) {
    self.check_tile_id(id);

    #Turn the ID into x/y coordinates.
    var spr = self.tiles[id];
    int srcX = spr.get_sub_rect_x();
    int srcY = spr.get_sub_rect_y();

    #Loop, draw
    for (int y=0; y<self.tileSize; y++) {
      for (int x=0; x<self.tileSize; x++) {
        var clr = self.img.get_pixel(x+srcX, y+srcY);
        img.set_pixel(x+destX, y+destY, clr);
      }
    }
  }


}


