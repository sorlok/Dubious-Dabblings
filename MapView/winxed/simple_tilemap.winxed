#####################################################################
# Simple tilemap
#####################################################################
class SimpleTileMap : TileMap {
  var offsetX;
  var offsetY;
  var tileset;

  #Dispatch to a relevant map loader.
  function load_file(string filename) {
    #Get the extension
    int i = indexof(filename, '.');  #TODO: Make sure we get the LAST index point.
    if (0) { throw Error("Bad map file name."); } #TODO: Check if it failed.
    string ext = substr(filename, i+1, length(filename)-(i+1));

    #Dispatch based on the extension
    if (ext == 'tmx') {
      self.load_tmx_map(filename);
    } else { throw Error("Unknown map extension."); }

    #Load tileset
    string tsfile = self.get_tile_palette_path();
    self.tileset = new SimpleTileSet;
    self.tileset.load_file(tsfile, self.get_tile_size());

    #Reset offset
    self.offsetX = 0;
    self.offsetY = 0;
  }

  #Load a map in the tmx format.
  function load_tmx_map(string filename) {
    #Manage the pointer.
    var ptr = LIB_dispatch_method(null, 'new_tmx_map', 'pp', filename);
    if (ptr==null) { throw Error("Couldn't load TMX file: " + filename); }
    self.set_ptr(ptr);
  }

  #Draw 
  function draw(var game) {
    #Calculate once
    int area_w = game.get_width();
    int area_h = game.get_height();
    int tile_size = self.get_tile_size();

    #Estimate tiles to draw
    int startTileX = self.offsetX / tile_size;
    int endTileX = (self.offsetX+area_w) / tile_size;
    int startTileY = self.offsetY / tile_size;
    int endTileY = (self.offsetY+area_h) / tile_size;

    #Bound.
    startTileX = self.bound(startTileX, 0, self.get_width()-1);
    endTileX   = self.bound(endTileX, 0, self.get_width()-1);
    startTileY = self.bound(startTileY, 0, self.get_width()-1);
    endTileY   = self.bound(endTileY, 0, self.get_width()-1);

    #Draw each tile at the correct position.
    int offsetX = -self.offsetX % tile_size;
    int offsetY = -self.offsetY % tile_size;
    for (int ty=startTileY; ty<=endTileY; ty++) {
      for (int tx=startTileX; tx<=endTileX; tx++) {
        int tile_id = self.get_tile_at(tx, ty);
        if (tile_id<0) { continue; }
        self.tileset.draw_tile(game, tile_id, offsetX, offsetY);
        offsetX += tile_size;
      }
      offsetX = -self.offsetX % tile_size;
      offsetY += tile_size;
    }
  }

  #Bound. (Note: Can we avoid making this a member function?)
  function bound(int value, int minval, int maxval) {
    if (value<minval) { return minval; }
    if (value>maxval) { return maxval; }
    return value;
  }

  #Set the tilemap's current offset.
  function set_offset(int x, int y) {
    self.offsetX = x;
    self.offsetY = y;
  }

  #Retrieve offset: X
  function get_offset_x() {
    return self.offsetX;
  }

  #Retrieve offset: Y
  function get_offset_y() {
    return self.offsetY;
  }

  #Retrieve tile size
  function get_tile_size() {
    int res = LIB_dispatch_method(self, 'gamemap_get_tile_size', 'ip');
    return res;
  }

  #Retrieve the path to this tilemap's palette.
  function get_tile_palette_path() {
    var res = LIB_dispatch_method(self, 'gamemap_get_tile_palette_path', 'pp');
    string resS = res.as_string();
    return resS;
  }

  #Retrieve this map's width in tiles
  function get_width() {
    int res = LIB_dispatch_method(self, 'gamemap_get_map_width', 'ip');
    return res;
  }

  #Retrieve this map's height in tiles
  function get_height() {
    int res = LIB_dispatch_method(self, 'gamemap_get_map_height', 'ip');
    return res;
  }

  #Get the tile ID of the tile at (x,y)
  function get_tile_at(int x, int y) {
    int res = LIB_dispatch_method(self, 'gamemap_get_tile_at', 'ipii', x, y);
    return res;
  }

}

