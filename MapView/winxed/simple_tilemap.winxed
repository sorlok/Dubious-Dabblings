#####################################################################
# Simple tilemap
#####################################################################
class SimpleTileMap : TileMap {
  var offsetX;
  var offsetY;
  var tileset;

  var bufferSprite;

  #Dispatch to a relevant map loader.
  function load_file(string filename) {
    #Get the extension
    int i = indexof(filename, '.');  #TODO: Make sure we get the LAST index point.
    if (0) { throw Error("Bad map file name."); } #TODO: Check if it failed.
    string ext = substr(filename, i+1, length(filename)-(i+1));

    #Dispatch based on the extension
    if (ext == 'tmx') {
      self.load_tmx_map(filename);
    } else { throw Error("Unknown map extension."); }

    #Load tileset
    string tsfile = self.get_tile_palette_path();
    self.tileset = new SimpleTileSet;
    self.tileset.load_file(tsfile, self.get_tile_size());

    #Reset offset
    self.offsetX = 0;
    self.offsetY = 0;

    #Create a buffered copy of our map, since SFML doesn't like drawing lots of tiles in a row.
    var clr = new Color;
    clr.init_new(0x33, 0x33, 0x33);
    int ts = self.get_tile_size();
    var buffer = new Image;
    buffer.init_empty_image(self.get_width()*ts, self.get_height()*ts, clr);

    #Draw
    int tileW = self.get_width();
    int tileH = self.get_height();
    for (int ty=0; ty<tileH; ty++) {
      for (int tx=0; tx<tileW; tx++) {
        int tile_id = self.get_tile_at(tx, ty);
        if (tile_id<0) { continue; }

        #Draw onto the buffer
        #NOTE: This is slow in SFML 1.6; better to use RenderImage and 2.0 if possible.
        self.tileset.stamp_image(buffer, tile_id, tx*ts, ty*ts);
      }

      #Temp
      say(ty + " => " + tileH);
    }

    #Save to a buffer sprite
    self.bufferSprite = new Sprite;
    self.bufferSprite.set_image(buffer);
  }

  #Load a map in the tmx format.
  function load_tmx_map(string filename) {
    #Manage the pointer.
    var ptr = LIB_dispatch_method(null, 'new_tmx_map', 'pp', filename);
    if (ptr==null) { throw Error("Couldn't load TMX file: " + filename); }
    self.set_ptr(ptr);
  }

  #Draw 
  function draw(var game) {
    #Just relay the buffer
    self.bufferSprite.set_position(-self.offsetX, -self.offsetY);
    game.draw_item(self.bufferSprite);
  }

  #Set the tilemap's current offset.
  function set_offset(int x, int y) {
    self.offsetX = x;
    self.offsetY = y;
  }

  #Retrieve offset: X
  function get_offset_x() {
    return self.offsetX;
  }

  #Retrieve offset: Y
  function get_offset_y() {
    return self.offsetY;
  }

  #Retrieve tile size
  function get_tile_size() {
    int res = LIB_dispatch_method(self, 'gamemap_get_tile_size', 'ip');
    return res;
  }

  #Retrieve the path to this tilemap's palette.
  function get_tile_palette_path() {
    var res = LIB_dispatch_method(self, 'gamemap_get_tile_palette_path', 'pp');
    string resS = res.as_string();
    return resS;
  }

  #Retrieve this map's width in tiles
  function get_width() {
    int res = LIB_dispatch_method(self, 'gamemap_get_map_width', 'ip');
    return res;
  }

  #Retrieve this map's height in tiles
  function get_height() {
    int res = LIB_dispatch_method(self, 'gamemap_get_map_height', 'ip');
    return res;
  }

  #Get the tile ID of the tile at (x,y)
  function get_tile_at(int x, int y) {
    int res = LIB_dispatch_method(self, 'gamemap_get_tile_at', 'ipii', x, y);
    return res;
  }

}

